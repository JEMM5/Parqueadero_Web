/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package web.parqueadero.struts.action;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import web.parqueadero.struts.form.VehiculoFormBean;

import modelo.Usuario;
import modelo.Vehiculo;

import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import modelo.Precio;

import service.parqueadero.ParkingServicios;
import service.parqueadero.ParkingServiciosImpl;

import service.ticket.Ticket;

/** 
 * MyEclipse Struts
 * Creation date: 02-02-2019
 * 
 * XDoclet definition:
 * @struts.action path="/ingresaVehiculo" name="vehiculoFormBean" scope="request"
 */
public class IngresaVehiculoAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward registrar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		VehiculoFormBean vehiculoForm = (VehiculoFormBean) form;
                
		//int id = Integer.parseInt(vehiculoForm.getId());
		String tipoVehiculo = vehiculoForm.getTipoVehiculo();
		String placa = vehiculoForm.getPlaca();
                //lo tomamos de la fecha actual no del input text
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Calendar cal = Calendar.getInstance();
                Date date = cal.getTime();
                String horaEntrada = dateFormat.format(date);
		//String horaEntrada = vehiculoForm.getHoraEntrada();
                
                int idResponsable = ((Usuario)request.getSession().getAttribute("usuarioIngresado")).getIdUsuario();
                String responsable = ((Usuario)request.getSession().getAttribute("usuarioIngresado")).getNombre();
                
                Vehiculo parqueo = new Vehiculo();
                //parqueo.setId(id);
                parqueo.setTipoVehiculo(tipoVehiculo);
                parqueo.setPlaca(placa);
                parqueo.setHoraEntrada(horaEntrada);
                parqueo.setIdResponsable(idResponsable);
                parqueo.setResponsable(responsable);

                ParkingServicios servicios = new ParkingServiciosImpl();
                servicios.registrarParqueo(parqueo);
                
                List<Vehiculo> parqueos = servicios.listarParqueosPendientes(idResponsable);
                HttpSession sesion = request.getSession();
                sesion.setAttribute("parqueos", parqueos);
                return mapping.findForward("actualizar");
                // TODO Auto-generated method stub
		/*
		String  id = vehiculoForm.getId();
		String tipoVehiculo = vehiculoForm.getTipoVehiculo();
		String placa = vehiculoForm.getPlaca();
		String horaEntrada = vehiculoForm.getHoraEntrada();
		String horaSalida = vehiculoForm.getHoraSalida();
		String tiempo = vehiculoForm.getTiempo();
		String valorPagar = vehiculoForm.getValorPagar();
		
		Usuario u  = (Usuario) request.getSession().getAttribute("usuarioIngresado");
		String responsable = u.getNombre();
		
		System.out.println("--" + id+"--" + placa+"--" + horaEntrada+"--" + horaSalida+"--" + tiempo+"--" + valorPagar+"--" + responsable);
		
		HttpSession sesion = request.getSession();
		List<Vehiculo> parqueos = (List<Vehiculo>) sesion.getAttribute("parqueos");
		if(parqueos == null){
			parqueos = new ArrayList<Vehiculo>();
		}
		
		Vehiculo vehiculo = new Vehiculo(id, tipoVehiculo, placa, horaEntrada,  horaSalida, tiempo,  valorPagar,  responsable);
		parqueos.add(vehiculo);
		
		sesion.setAttribute("parqueos", parqueos);
		
		for(Vehiculo v : parqueos){
			System.out.println("======"+v.getPlaca());
		}
		
		//return null;
		return mapping.findForward("actualizar");
                */
                
	}
	
	public ActionForward generarTicket(ActionMapping mapping, ActionForm form, 
			HttpServletRequest request, HttpServletResponse response){
		VehiculoFormBean vehiculoTicket = (VehiculoFormBean) form;
		//todo el codigo para recibir el resto de datos 
		//guardarlos en DB
		//y ejecutar los metodos de l ticket
                /**
                 * INICIALIZAR LOS PRECIOS A NIVEL DE SESION SOLO
                 * SE INICIALIZAN CUANDO SE INGRESA AL BLOQUE DE
                 * PRECIOS.
                 */
                ParkingServicios servicios = new ParkingServiciosImpl();
                int idResponsable = ((Usuario)request.getSession().getAttribute("usuarioIngresado")).getIdUsuario();
                
                int idParqueo = Integer.parseInt(vehiculoTicket.getId());
                
                DateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Calendar cal2 = Calendar.getInstance();
                Date date2 = cal2.getTime();
                String horaSalida = dateFormat2.format(date2);
                //de momento no vamos a√±adir el algoritmo del calculo de tiempo
                int tiempo = servicios.conocerTiempo(vehiculoTicket.getHoraEntrada());
                
                String tipoV = vehiculoTicket.getTipoVehiculo();
                double valorPrecio = ((Precio)request.getSession().getAttribute(tipoV)).getPrecio();
                double valorPagar = servicios.generarValorParqueo(tiempo, valorPrecio);
                
                
                
                Vehiculo parqueoBaja = new Vehiculo();
                parqueoBaja.setHoraSalida(horaSalida);
                parqueoBaja.setTiempo(tiempo);
                parqueoBaja.setValorPagar(valorPagar);
                parqueoBaja.setId(idParqueo);
                
                
                servicios.finalizarParqueo(parqueoBaja);
                
                //METODO PARA GENERAR EL TICKET
                    Ticket ticket = new Ticket(idParqueo, vehiculoTicket.getHoraEntrada(),horaSalida,tipoV,vehiculoTicket.getPlaca(), valorPagar);
                    ticket.generarFactura();
                //
                
                List<Vehiculo> parqueos = servicios.listarParqueosPendientes(idResponsable);
                HttpSession sesion = request.getSession();
                sesion.setAttribute("parqueos", parqueos);
                return mapping.findForward("actualizar");                
	}
}